#include <stdio.h>
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include "main.h"
#include "communication.h"

extern nodeAddress node[];
extern int global_port;

void * sendBroadcast(void *json_ptr)
{
    //configuration numer of thread
    int number = (*(int*)void_number);

    printf("CONNECT_THREAD[%d] STARTED \n",number);

    int sockfd, n;
    struct sockaddr_in serv_addr;
    struct hostent *server;

    char buffer[256];

    /* Create a socket point */
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) 
    {
        fprintf(stderr, "CLIENT[%d] - ERROR opening socket\n", number);
        return;
    }
    server = gethostbyname(node[number].ip);
    if (server == NULL) {
        fprintf(stderr,"CLIENT[%d] - ERROR, no such host: %s\n", number, node[number].ip );
        return;
    }

    bzero((char *) &serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    bcopy((char *)server->h_addr, (char *)&serv_addr.sin_addr.s_addr, server->h_length);
    serv_addr.sin_port = htons(node[number].port);

    /* Now connect to the server */
    if (connect(sockfd,&serv_addr,sizeof(serv_addr)) < 0) 
    {
         fprintf(stderr, "CLIENT[%d] - ERROR connecting\n", number);
         return;
    }	
    /* Now ask for a message from the user, this message
    * will be read by server
    */
    bzero(buffer,256);
//    fgets(buffer,255,stdin);
    strcpy(buffer,"{type:ok,clock:1}");

    /* Send message to the server */
    n = write(sockfd,buffer,strlen(buffer));
    if (n < 0) 
    {
         fprintf(stderr,"CLIENT[%d] - ERROR writing to socket\n", number);
         return;
    }
    /* Now read server response */
    bzero(buffer,256);
    n = read(sockfd,buffer,255);
    if (n < 0) 
    {
         fprintf("CLIENT[%d] - ERROR reading from socket\n", number);
         return;
    }
    printf("%s\n",buffer);
    return;
}
